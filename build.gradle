buildscript {
    ext.kotlin_version = '1.3.40'
    ext.serialization_version = '0.13.0'
    ext.spek_version = '2.1.0-alpha.0.10+cc4a596'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.40'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.50'
}

group 'com.thehumancolossuslab'
version '0.0.10'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url = uri("https://dl.bintray.com/korlibs/korlibs/") }
    maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots") }
    maven { url "https://dl.bintray.com/spekframework/spek-dev" }
}

repositories {
    mavenCentral()
}

kotlin {
    jvm()
    js {
    }.compilations.all {
        kotlinOptions.moduleKind = "commonjs"
        kotlinOptions.sourceMap = false
        kotlinOptions.outputFile = "$project.buildDir.path/js/packages/${project.name}/lib/oca.js"
        kotlinOptions.main = "noCall"
        kotlinOptions.metaInfo = true
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'com.soywiz.korlibs.krypto:krypto:1.9.0'
                implementation 'com.ionspin.kotlin:bignum:0.1.4-SNAPSHOT'
                implementation 'com.benasher44:uuid:0.0.5'
                implementation kotlin('stdlib')
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "org.spekframework.spek2:spek-dsl-metadata:$spek_version"
            }
        }

        jvmMain {
            kotlin.srcDirs += 'src/jvmMain'
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }

        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"

                runtimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek_version"
                runtimeOnly 'org.jetbrains.kotlin:kotlin-reflect'
            }
        }

        jsMain() {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }

        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
                implementation "org.spekframework.spek2:spek-dsl-js:$spek_version"
            }
        }
    }
}

jvmTest {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

task run(type: JavaExec) {
    main = 'com.thehumancolossuslab.oca.Hello'
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main

    def classes = files(
            compilation.runtimeDependencyFiles,
            compilation.output.allOutputs
    )
    classpath = classes
}

task packageJSON(){
    doLast {
        new File("$buildDir/js/packages/${project.name}", "package.json").text = """{
  "name": "oca.js",
  "version": "$version",
  "main": "dist/main.js",
    "scripts": {
    "build": "webpack",
    "preinstall": "command -v link-module-alias; link-module-alias clean || true",
    "postinstall": "link-module-alias"
  },
  "dependencies": {
    "kotlin": "^$kotlin_version",
    "link-module-alias": "^1.2.0",
    "kotlinx-serialization-kotlinx-serialization-runtime": "file:./dependencies/kotlinx-serialization-kotlinx-serialization-runtime/$serialization_version",
    "bignum": "file:./dependencies/bignum/0.1.4-SNAPSHOT",
    "krypto-root-krypto": "file:./dependencies/krypto-root-krypto/1.9.0",
    "uuid": "file:./dependencies/uuid/0.0.5"
  },
  "devDependencies": {
    "@babel/core": "^7.9.6",
    "babel-loader": "^8.1.0",
    "path": "^0.12.7",
    "webpack": "^4.43.0",
    "webpack-cli": "^3.3.11",
    "webpack-node-externals": "^1.7.2"
  }
}
"""

        new File("$buildDir/js/packages/${project.name}", "webpack.config.js").text = """
const webpack = require('webpack');
const path = require('path');
var nodeExternals = require('webpack-node-externals');

module.exports = {
  mode: 'production',
  entry: path.resolve(__dirname + '/lib/oca.js'),
  output: {
    path: path.resolve(__dirname + '/dist/'),
    filename: 'main.js',

    libraryTarget: 'umd',
    library: 'oca'
  },
  module: {
    rules: [
      {
        test: /.js/,
        use: 'babel-loader',
        include: __dirname,
        exclude: /node_modules/
      }
    ]
  },
  externals: [nodeExternals()]
};
"""

        new File("$buildDir/js/packages/${project.name}", ".npmignore").text = """
node_modules
lib
yarn.lock
webpack.config.js
"""
    }
}

build.dependsOn packageJSON
